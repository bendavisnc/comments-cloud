({:full-path "/dao/src/test/java/com/iluwatar/dao/AppTest.java",
  :comments-found ("Application test")}
 {:full-path "/dao/src/main/java/com/iluwatar/dao/Customer.java",
  :comments-found ("Customer")}
 {:full-path "/dao/src/main/java/com/iluwatar/dao/App.java",
  :comments-found
  ("With the DAO pattern we can use various method calls to retrieveadddeleteupdate data without directly  interacting with the data The below example demonstrates basic operationsCRUD select add update and delete   public class App   Program entry point  param args command line args public static void mainString args CustomerDaoImpl customerDao  new CustomerDaoImplgenerateSampleCustomersSystemoutprintlncustomerDaogetAllCustomers   customerDaogetAllCustomersSystemoutprintlncustomerDaogetCusterById   customerDaogetCusterByIdCustomer customer  new Customer Dan DansoncustomerDaoaddCustomercustomerSystemoutprintlncustomerDaogetAllCustomers   customerDaogetAllCustomerscustomersetFirstNameDanielcustomersetLastNameDanielsoncustomerDaoupdateCustomercustomerSystemoutprintlncustomerDaogetAllCustomers   customerDaogetAllCustomerscustomerDaodeleteCustomercustomerSystemoutprintlncustomerDaogetAllCustomers   customerDaogetAllCustomers  Generate customers  return list of customers")}
 {:full-path
  "/dao/src/main/java/com/iluwatar/dao/CustomerDaoImpl.java",
  :comments-found
  ("Represents the DB structure for our example so we dont have to managed it ourselves"
   "Note Normally this would be in the form of an actual database and not part of the Dao Impl"
   "No customer found"
   "The data access object DAO is an object that provides an abstract interface to some type of database or other persistence mechanism  By mapping application calls to the persistence layer DAO provide some specific data operations without exposing details of the database  This isolation supports the Single responsibility principle It separates what data accesses the application needs in terms of  domainspecific objects and data types the public interface of the DAO from how these needs can be satisfied with a specific DBMS  database schema etc")}
 {:full-path "/dao/src/main/java/com/iluwatar/dao/CustomerDao.java",
  :comments-found ("CustomerDao")}
 {:full-path
  "/visitor/src/test/java/com/iluwatar/visitor/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/visitor/src/main/java/com/iluwatar/visitor/UnitVisitor.java",
  :comments-found ("Visitor interface")}
 {:full-path
  "/visitor/src/main/java/com/iluwatar/visitor/Commander.java",
  :comments-found ("Commander")}
 {:full-path
  "/visitor/src/main/java/com/iluwatar/visitor/SergeantVisitor.java",
  :comments-found ("SergeantVisitor")}
 {:full-path "/visitor/src/main/java/com/iluwatar/visitor/App.java",
  :comments-found
  ("Visitor pattern defines mechanism to apply operations on nodes  in hierarchy New operations can be added without altering the node  interface  p  In this example there is a unit hierarchy beginning from link Commander  This hierarchy is traversed by visitors link SoldierVisitor applies  its operation on link Soldiers link SergeantVisitor on link Sergeants and so  on   public class App   Program entry point  param args command line args")}
 {:full-path "/visitor/src/main/java/com/iluwatar/visitor/Unit.java",
  :comments-found ("Interface for the nodes in hierarchy")}
 {:full-path
  "/visitor/src/main/java/com/iluwatar/visitor/Sergeant.java",
  :comments-found ("Sergeant")}
 {:full-path
  "/visitor/src/main/java/com/iluwatar/visitor/Soldier.java",
  :comments-found ("Soldier")}
 {:full-path
  "/visitor/src/main/java/com/iluwatar/visitor/SoldierVisitor.java",
  :comments-found ("SoldierVisitor")}
 {:full-path
  "/visitor/src/main/java/com/iluwatar/visitor/CommanderVisitor.java",
  :comments-found ("CommanderVisitor")}
 {:full-path
  "/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFish.java",
  :comments-found ("RainbowFish is the initial schema")}
 {:full-path
  "/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java",
  :comments-found
  ("RainbowFishSerializer provides methods for reading and writing link RainbowFish objects to file  Tolerant Reader pattern is implemented here by serializing maps instead of link RainbowFish objects  This way the reader does not break even though new properties are added to the schema  public class RainbowFishSerializer   Write V RainbowFish to file  param rainbowFish  param filename  throws IOException public static void writeVRainbowFish rainbowFish String filename throws IOException MapString String map  new HashMapmapputname rainbowFishgetNamemapputage Stringformatd rainbowFishgetAgemapputlengthMeters Stringformatd rainbowFishgetLengthMetersmapputweightTons Stringformatd rainbowFishgetWeightTonsFileOutputStream fileOut  new FileOutputStreamfilenameObjectOutputStream objOut  new ObjectOutputStreamfileOutobjOutwriteObjectmapobjOutclosefileOutclose  Write V RainbowFish to file  param rainbowFish  param filename  throws IOException public static void writeVRainbowFishV rainbowFish String filename throws IOException MapString String map  new HashMapmapputname rainbowFishgetNamemapputage Stringformatd rainbowFishgetAgemapputlengthMeters Stringformatd rainbowFishgetLengthMetersmapputweightTons Stringformatd rainbowFishgetWeightTonsmapputangry BooleantoStringrainbowFishgetAngrymapputhungry BooleantoStringrainbowFishgetHungrymapputsleeping BooleantoStringrainbowFishgetSleepingFileOutputStream fileOut  new FileOutputStreamfilenameObjectOutputStream objOut  new ObjectOutputStreamfileOutobjOutwriteObjectmapobjOutclosefileOutclose  Read V RainbowFish from file  param filename  return  throws IOException  throws ClassNotFoundException")}
 {:full-path
  "/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishV2.java",
  :comments-found ("RainbowFishV is the evolved schema")}
 {:full-path
  "/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/App.java",
  :comments-found
  ("Write V"
   "Read V"
   "Write V"
   "Read V with V method"
   "Tolerant Reader is an integration pattern that helps creating robust communication  systems The idea is to be as tolerant as possible when reading data from another  service This way when the communication schema changes the readers must not break  p  In this example we use Java serialization to write representations of link RainbowFish  objects to file link RainbowFish is the initial version which we can easily read and  write using link RainbowFishSerializer methods link RainbowFish then evolves to link RainbowFishV  and we again write it to file with a method designed to do just that However the reader  client does not know about the new format and still reads with the method designed for  V schema Fortunately the reading method has been designed with the Tolerant Reader  pattern and does not break even though link RainbowFishV has new fields that are serialized")}
 {:full-path
  "/property/src/test/java/com/iluwatar/property/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/property/src/main/java/com/iluwatar/property/Character.java",
  :comments-found
  ("Nullvalue object"
   "Represents Character in game and his abilities base stats")}
 {:full-path "/property/src/main/java/com/iluwatar/property/App.java",
  :comments-found
  ("boost default armor for warrior"
   "boost default agility for rogue"
   "Example of link Character instantiation using the Property pattern also known as Prototype inheritance  p  In prototype inheritance instead of classes as opposite to Java class inheritance  objects are used to create another objects and object hierarchies Hierarchies are created using prototype chain   through delegation every object has link to parent object Any base parent object can be amended at runtime   by adding or removal of some property and all child objects will be affected as result   public class App   Program entry point  param args command line args public static void mainString args  set up Prototype charProto  new CharactercharProtosetStatsSTRENGTH charProtosetStatsAGILITY charProtosetStatsARMOR charProtosetStatsATTACKPOWER Character mageProto  new CharacterTypeMAGE charProtomageProtosetStatsINTELLECT mageProtosetStatsSPIRIT Character warProto  new CharacterTypeWARRIOR charProtowarProtosetStatsRAGE warProtosetStatsARMOR   boost default armor for warriorCharacter rogueProto  new CharacterTypeROGUE charProtorogueProtosetStatsENERGY rogueProtosetStatsAGILITY   boost default agility for rogue usage")}
 {:full-path
  "/property/src/main/java/com/iluwatar/property/Stats.java",
  :comments-found ("All possible attributes that Character can have")}
 {:full-path
  "/property/src/main/java/com/iluwatar/property/Prototype.java",
  :comments-found ("Interface for prototype inheritance")}
 {:full-path
  "/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java",
  :comments-found
  ("Handle the result of computation"
   "This application demonstrates HalfSyncHalfAsync pattern Key parts of the pattern are  link AsyncTask and link AsynchronousService    p  iPROBLEMi  br  A concurrent system have a mixture of short duration mid duration and long duration tasks  Mid or long duration tasks should be performed asynchronously to meet quality of service  requirements      piINTENTi  br  The intent of this pattern is to separate the the synchronous and asynchronous processing  in the concurrent application by introducing two intercommunicating layers  one for sync  and one for async This simplifies the programming without unduly affecting the performance     p  iAPPLICABILITYi  br  ul  liUNIX network subsystems  In operating systems network operations are carried out  asynchronously with help of hardware level interruptsli  liCORBA  At the asynchronous layer one thread is associated with each socket that is  connected to the client Thread blocks waiting for CORBA requests from the client On receiving  request it is inserted in the queuing layer which is then picked up by synchronous layer which  processes the request and sends response back to the clientli  liAndroid AsyncTask framework  Framework provides a way to execute long running blocking calls  such as downloading a file in background threads so that the UI thread remains free to respond  to user inputsi   ul     p  iIMPLEMENTATIONi  br  The main method creates an asynchronous service which does not block the main thread while  the task is being performed The main thread continues its work which is similar to Async Method  Invocation pattern The difference between them is that there is a queuing layer between Asynchronous  layer and synchronous layer which allows for different communication patterns between both layers  Such as Priority Queue can be used as queuing layer to prioritize the way tasks are executed  Our implementation is just one simple way of implementing this pattern there are many variants possible  as described in its applications   public class App   Program entry point  param args command line args public static void mainString args AsynchronousService service  new AsynchronousServicenew LinkedBlockingQueue   A new task to calculate sum is received but as this is main thread it should not block   So it passes it to the asynchronous task layer to compute and proceeds with handling other   incoming requests This is particularly useful when main thread is waiting on Socket to receive   new incoming requests and does not wait for particular request to be completed before responding   to new request serviceexecutenew ArithmeticSumTask New task received lets pass that to async layer for computation So both requests will be  executed in parallel serviceexecutenew ArithmeticSumTaskserviceexecutenew ArithmeticSumTaskserviceexecutenew ArithmeticSumTask    ArithmeticSumTask  static class ArithmeticSumTask implements AsyncTaskLong private long npublic ArithmeticSumTasklong n thisn  n  This is the long running task that is performed in background In our example   the long running task is calculating arithmetic sum with artificial delay Overridepublic Long call throws Exception return apn  This will be called in context of the main thread where some validations can be  done regarding the inputs Such as it must be greater than  Its a small  computation which can be performed in main thread If we did validated the input  in background thread then we pay the cost of context switching  which is much more than validating it in main thread")}
 {:full-path
  "/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java",
  :comments-found
  ("some small tasks such as validation can be performed here"
   "should not occur"
   "This is the asynchronous layer which does not block when a new request arrives It just passes  the request to the synchronous layer which consists of a queue ie a link BlockingQueue and  a pool of threads ie link ThreadPoolExecutor Out of this pool of worker threads one of the   thread picks up the task and executes it synchronously in background and the result is posted back  to the caller via callback public class AsynchronousService   This represents the queuing layer as well as synchronous layer of the pattern The thread  pool contains worker threads which execute the tasks in blockingsynchronous manner Long  running tasks should be performed in the background which does not affect the performance of  main thread private ExecutorService service  Creates an asynchronous service using code workQueue as communication channel between  asynchronous layer and synchronous layer Different types of queues such as Priority queue  can be used to control the pattern of communication between the layers  public AsynchronousServiceBlockingQueueRunnable workQueue service  new ThreadPoolExecutor   TimeUnitSECONDS workQueue  A nonblocking method which performs the task provided in background and returns immediately  p  On successful completion of task the result is posted back using callback method  link AsyncTaskonPostCallObject if task execution is unable to complete normally  due to some exception then the reason for error is posted back using callback method  link AsyncTaskonErrorThrowable  p  NOTE The results are posted back in the context of background thread in this implementation public T void executefinal AsyncTaskT task try  some small tasks such as validation can be performed heretaskonPreCall catch Exception e taskonErroreservicesubmitnew FutureTaskTtask Overrideprotected void done superdonetry  called in context of background thread There is other variant possible  where result is posted back and sits in the queue of caller thread which  then picks it up for processing An example of such a system is Android OS  where the UI elements can only be updated using UI thread So result must be  posted back in UI thread")}
 {:full-path
  "/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsyncTask.java",
  :comments-found
  ("Represents some computation that is performed asynchronously and its result   The computation is typically done is background threads and the result is posted   back in form of callback The callback does not implement code isComplete code cancel   as it is out of scope of this pattern    param O type of result public interface AsyncTaskO extends CallableO   Is called in context of caller thread before call to link call Large  tasks should not be performed in this method as it will block the caller thread  Small tasks such as validations can be performed here so that the performance penalty  of context switching is not incurred in case of invalid requests void onPreCall  A callback called after the result is successfully computed by link call In our  implementation this method is called in context of background thread but in some variants  such as Android where only UI thread can change the state of UI widgets this method is called  in context of UI thread void onPostCallO result  A callback called if computing the task resulted in some exception This method  is called when either of link call or link onPreCall throw any exception    param throwable error cause void onErrorThrowable throwable  This is where the computation of task should reside This method is called in context  of background thread")}
 {:full-path
  "/null-object/src/test/java/com/iluwatar/nullobject/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java",
  :comments-found
  ("Null Object implementation for binary tree node  p  Implemented as Singleton since all the NullNodes are the same")}
 {:full-path
  "/null-object/src/main/java/com/iluwatar/nullobject/App.java",
  :comments-found
  ("Null Object pattern replaces null values with neutral objects  Many times this simplifies algorithms since no extra null checks  are needed  p  In this example we build a binary tree where the nodes are either  normal or Null Objects No null values are used in the tree making  the traversal easy  public class App   Program entry point  param args command line args")}
 {:full-path
  "/null-object/src/main/java/com/iluwatar/nullobject/Node.java",
  :comments-found ("Interface for binary tree node")}
 {:full-path
  "/null-object/src/main/java/com/iluwatar/nullobject/NodeImpl.java",
  :comments-found ("Implementation for binary trees normal nodes")}
 {:full-path
  "/builder/src/test/java/com/iluwatar/builder/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/builder/src/main/java/com/iluwatar/builder/Profession.java",
  :comments-found ("Profession enumeration")}
 {:full-path "/builder/src/main/java/com/iluwatar/builder/Hero.java",
  :comments-found
  ("Hero the class with many parameters   public class Hero private final Profession professionprivate final String nameprivate final HairType hairTypeprivate final HairColor hairColorprivate final Armor armorprivate final Weapon weaponpublic Profession getProfession return professionpublic String getName return namepublic HairType getHairType return hairTypepublic HairColor getHairColor return hairColorpublic Armor getArmor return armorpublic Weapon getWeapon return weaponOverridepublic String toString StringBuilder sb  new StringBuildersbappendThis is a sbappendprofessionsbappend named sbappendnameif hairColor  null  hairType  null sbappend with if hairColor  null sbappendhairColorsbappend if hairType  null sbappendhairTypesbappend sbappendhairType  HairTypeBALD  hair  headif armor  null sbappend wearing sbappendarmorif weapon  null sbappend and wielding a sbappendweaponsbappendreturn sbtoStringprivate HeroHeroBuilder builder thisprofession  builderprofessionthisname  buildernamethishairColor  builderhairColorthishairType  builderhairTypethisweapon  builderweaponthisarmor  builderarmor    The builder class")}
 {:full-path
  "/builder/src/main/java/com/iluwatar/builder/HairType.java",
  :comments-found ("HairType enumeration")}
 {:full-path "/builder/src/main/java/com/iluwatar/builder/Armor.java",
  :comments-found ("Armor enumeration")}
 {:full-path "/builder/src/main/java/com/iluwatar/builder/Weapon.java",
  :comments-found ("Weapon enumeration")}
 {:full-path "/builder/src/main/java/com/iluwatar/builder/App.java",
  :comments-found
  ("This is the Builder pattern variation as described by Joshua Bloch in  Effective Java nd Edition  p  We want to build link Hero objects but its construction is complex because of the  many parameters needed To aid the user we introduce link HeroBuilder class  link HeroBuilder takes the minimum parameters to build link Hero object in its  constructor After that additional configuration for the link Hero object can be  done using the fluent link HeroBuilder interface When configuration is ready the  build method is called to receive the final link Hero object   public class App   Program entry point  param args command line args")}
 {:full-path
  "/builder/src/main/java/com/iluwatar/builder/HairColor.java",
  :comments-found ("HairColor enumeration")}
 {:full-path
  "/repository/src/test/java/com/iluwatar/repository/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/repository/src/main/java/com/iluwatar/repository/PersonRepository.java",
  :comments-found ("Person repository")}
 {:full-path
  "/repository/src/main/java/com/iluwatar/repository/Person.java",
  :comments-found ("Person entity")}
 {:full-path
  "/repository/src/main/java/com/iluwatar/repository/App.java",
  :comments-found
  ("Add new Person records"
   "Count Person records"
   "Print all records"
   "Find Person by surname"
   "Update Person"
   "Remove record from Person"
   "And finally count records"
   "Repository pattern mediates between the domain and data mapping layers using a collectionlike  interface for accessing domain objects A system with complex domain model often benefits from  a layer that isolates domain objects from the details of the database access code and in such  systems it can be worthwhile to build another layer of abstraction over the mapping layer where  query construction code is concentrated This becomes more important when there are a large   number of domain classes or heavy querying In these cases particularly adding this layer helps  minimize duplicate query logic  p  In this example we utilize Spring Data to automatically generate a repository for us from the link Person  domain object Using the link PersonRepository we perform CRUD operations on the entity Underneath we have  configured inmemory H database for which schema is created and dropped on each run  public class App   Program entry point  param args command line args")}
 {:full-path
  "/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/AppTest.java",
  :comments-found ("Application test")}
 {:full-path
  "/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Item.java",
  :comments-found ("Item")}
 {:full-path
  "/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java",
  :comments-found
  ("In link Inventory we store the items with a given size However we do not store  more items than the inventory size To address concurrent access problems we  use double checked locking to add item to inventory In this method the  thread which gets the lock first adds the item   public class App   Program entry point  param args command line args")}
 {:full-path
  "/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java",
  :comments-found ("Inventory")}
 ...)